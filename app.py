import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import warnings
import os

# --- ConfiguraciÃ³n de la PÃ¡gina ---
st.set_page_config(
    page_title="Motor de VisualizaciÃ³n de Datos de EVs",
    page_icon="ğŸ“Š",
    layout="wide",
)

warnings.filterwarnings('ignore')

# --- Carga de Datos en CachÃ© ---
@st.cache_data
def load_and_clean_data(filepath):
    """Carga y limpia los datos desde un archivo CSV. Los resultados se guardan en cachÃ©."""
    try:
        df = pd.read_csv(filepath)
        df['value'] = df['value'].astype(str).str.replace('.', '', regex=False)
        df['value'] = pd.to_numeric(df['value'], errors='coerce')
        df['value'].fillna(0, inplace=True)
        df['year'] = pd.to_numeric(df['year'], errors='coerce')
        df.dropna(subset=['year'], inplace=True)
        df['year'] = df['year'].astype(int)
        return df
    except FileNotFoundError:
        st.error(f"Error: El archivo de datos '{filepath}' no fue encontrado.")
        return pd.DataFrame()

# --- AplicaciÃ³n Principal ---
def main():
    st.title("ğŸ“Š Motor de VisualizaciÃ³n de Datos de EVs")
    st.markdown("Selecciona un tipo de grÃ¡fico en el panel lateral para analizar el mercado de vehÃ­culos elÃ©ctricos desde diferentes perspectivas.")

    # --- Carga de Datos ---
    script_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(script_dir, 'Practica ICESI.csv')
    df = load_and_clean_data(file_path)

    if df.empty:
        return

    # --- Panel Lateral de Controles (Sidebar) ---
    st.sidebar.header("Panel de Control")
    
    chart_types = [
        "GrÃ¡fico de Barras", "GrÃ¡fico Lineal", "Diagrama de Cajas",
        "Mapa de Calor", "GrÃ¡fico Circular (Sunburst)", "Diagrama de DispersiÃ³n",
        "GrÃ¡fico de Burbujas", "GrÃ¡fico de Barras Apiladas", "Diagrama de Pareto",
        "GrÃ¡fico en Cascada", "GrÃ¡fico de Embudo", "Cuadro de ManÃ³metros", "Carta Radar"
    ]
    chart_type = st.sidebar.selectbox("Selecciona un Tipo de GrÃ¡fico", chart_types)
    
    # Filtros comunes
    st.sidebar.markdown("---")
    st.sidebar.subheader("Filtros Generales")
    
    # Usar 'parameter' como mÃ©trica principal
    metric_options = ['EV stock', 'EV sales', 'EV stock share', 'EV sales share']
    selected_metric = st.sidebar.selectbox("Selecciona la MÃ©trica Principal", metric_options)

    # Filtro de aÃ±o
    min_year, max_year = int(df['year'].min()), int(df['year'].max())
    year_range = st.sidebar.slider("Selecciona un Rango de AÃ±os", min_year, max_year, (min_year, max_year))

    # Filtrar el DataFrame segÃºn los filtros comunes
    filtered_df = df[
        (df['parameter'] == selected_metric) &
        (df['year'] >= year_range[0]) &
        (df['year'] <= year_range[1])
    ]

    # --- LÃ³gica de VisualizaciÃ³n ---
    if chart_type == "GrÃ¡fico de Barras":
        st.subheader("GrÃ¡fico de Barras: ComparaciÃ³n de Magnitudes")
        st.info("**PropÃ³sito:** Comparar una mÃ©trica entre diferentes categorÃ­as. Ideal para ver quÃ© regiones o tipos de vehÃ­culos lideran en un aÃ±o especÃ­fico.")
        
        year_to_show = st.slider("Selecciona un aÃ±o para comparar", min_year, max_year, max_year - 1)
        data = filtered_df[(filtered_df['year'] == year_to_show) & (filtered_df['region'] != 'World') & (filtered_df['powertrain'] == 'EV')].groupby('region')['value'].sum().nlargest(15)
        
        fig = px.bar(data, x=data.index, y='value', title=f'Top 15 Regiones por "{selected_metric}" en {year_to_show}', labels={'value': 'Valor', 'region': 'RegiÃ³n'})
        st.plotly_chart(fig, use_container_width=True)

    elif chart_type == "GrÃ¡fico Lineal":
        st.subheader("GrÃ¡fico Lineal: EvoluciÃ³n en el Tiempo")
        st.info("**PropÃ³sito:** Mostrar cÃ³mo una mÃ©trica cambia a lo largo del tiempo. Perfecto para visualizar tendencias de crecimiento.")

        region_options = ['World'] + sorted(filtered_df['region'].unique())
        selected_region = st.selectbox("Selecciona una RegiÃ³n", region_options)

        data = filtered_df[(filtered_df['region'] == selected_region) & (filtered_df['powertrain'] == 'EV')].groupby('year')['value'].sum()
        
        fig = px.line(data, x=data.index, y='value', title=f'Tendencia de "{selected_metric}" en {selected_region}', markers=True, labels={'value': 'Valor', 'year': 'AÃ±o'})
        st.plotly_chart(fig, use_container_width=True)

    elif chart_type == "Diagrama de Cajas":
        st.subheader("Diagrama de Cajas (Box Plot): DistribuciÃ³n de Datos")
        st.info("**PropÃ³sito:** Entender la distribuciÃ³n de una mÃ©trica a travÃ©s de diferentes categorÃ­as, mostrando la mediana, los cuartiles y los valores atÃ­picos.")

        data = filtered_df[(filtered_df['powertrain'] == 'EV') & (filtered_df['region'] != 'World')]
        
        fig = px.box(data, x='region', y='value', title=f'DistribuciÃ³n de "{selected_metric}" por RegiÃ³n', labels={'value': 'Valor', 'region': 'RegiÃ³n'})
        st.plotly_chart(fig, use_container_width=True)

    elif chart_type == "Mapa de Calor":
        st.subheader("Mapa de Calor: CorrelaciÃ³n entre Variables")
        st.info("**PropÃ³sito:** Visualizar la magnitud de una mÃ©trica en una matriz de dos dimensiones. Excelente para ver cÃ³mo la mÃ©trica varÃ­a entre regiones y a lo largo de los aÃ±os simultÃ¡neamente.")

        data = filtered_df[(filtered_df['powertrain'] == 'EV') & (filtered_df['region'] != 'World')].pivot_table(index='region', columns='year', values='value', aggfunc='sum')
        
        fig = px.imshow(data, title=f'Mapa de Calor de "{selected_metric}" (RegiÃ³n vs. AÃ±o)', labels=dict(x="AÃ±o", y="RegiÃ³n", color="Valor"))
        st.plotly_chart(fig, use_container_width=True)

    elif chart_type == "GrÃ¡fico Circular (Sunburst)":
        st.subheader("GrÃ¡fico Sunburst: VisualizaciÃ³n JerÃ¡rquica")
        st.info("**PropÃ³sito:** Mostrar la proporciÃ³n de cada parte sobre un todo, de forma jerÃ¡rquica. AquÃ­ lo usamos para ver la composiciÃ³n del mercado por tipo de vehÃ­culo y tipo de motor (BEV/PHEV).")

        year_to_show = st.slider("Selecciona un aÃ±o para la jerarquÃ­a", min_year, max_year, max_year - 1)
        data = df[(df['year'] == year_to_show) & (df['parameter'] == selected_metric) & (df['region'] == 'World') & (df['powertrain'].isin(['BEV', 'PHEV']))]
        
        fig = px.sunburst(data, path=['mode', 'powertrain'], values='value', title=f'ComposiciÃ³n del Mercado Mundial en {year_to_show}')
        st.plotly_chart(fig, use_container_width=True)

    elif chart_type == "Diagrama de DispersiÃ³n":
        st.subheader("Diagrama de DispersiÃ³n: RelaciÃ³n entre dos MÃ©tricas")
        st.info("**PropÃ³sito:** Investigar la relaciÃ³n entre dos variables numÃ©ricas. AquÃ­ comparamos el stock de EVs contra las ventas de EVs para identificar tendencias entre regiones.")
        
        year_to_show = st.slider("Selecciona un aÃ±o para la dispersiÃ³n", min_year, max_year, max_year-1)
        df_stock = df[(df['parameter'] == 'EV stock') & (df['year'] == year_to_show) & (df['region'] != 'World')]
        df_sales = df[(df['parameter'] == 'EV sales') & (df['year'] == year_to_show) & (df['region'] != 'World')]
        
        merged_df = pd.merge(df_stock, df_sales, on='region', suffixes=('_stock', '_sales'))
        
        fig = px.scatter(merged_df, x='value_sales', y='value_stock', text='region', title=f'Ventas vs. Stock de EVs por RegiÃ³n en {year_to_show}',
                         labels={'value_sales': 'Ventas de EVs', 'value_stock': 'Stock de EVs'})
        fig.update_traces(textposition='top center')
        st.plotly_chart(fig, use_container_width=True)

    elif chart_type == "GrÃ¡fico de Burbujas":
        st.subheader("GrÃ¡fico de Burbujas: RelaciÃ³n entre Tres MÃ©tricas")
        st.info("**PropÃ³sito:** Similar al de dispersiÃ³n, pero aÃ±ade una tercera dimensiÃ³n representada por el tamaÃ±o de la burbuja. AquÃ­, el tamaÃ±o representa la cuota de mercado.")
        
        year_to_show = st.slider("Selecciona un aÃ±o para las burbujas", min_year, max_year, max_year-1)
        df_stock = df[(df['parameter'] == 'EV stock') & (df['year'] == year_to_show) & (df['region'] != 'World')]
        df_sales = df[(df['parameter'] == 'EV sales') & (df['year'] == year_to_show) & (df['region'] != 'World')]
        df_share = df[(df['parameter'] == 'EV sales share') & (df['year'] == year_to_show) & (df['region'] != 'World')]
        
        merged_df = pd.merge(df_stock, df_sales, on='region', suffixes=('_stock', '_sales'))
        merged_df = pd.merge(merged_df, df_share, on='region')
        
        fig = px.scatter(merged_df, x='value_sales', y='value_stock', size='value', color='region',
                         hover_name='region', size_max=60, title=f'Ventas vs. Stock vs. Cuota de Mercado en {year_to_show}',
                         labels={'value_sales': 'Ventas', 'value_stock': 'Stock', 'value': 'Cuota de Mercado (%)'})
        st.plotly_chart(fig, use_container_width=True)
    
    # ... (Se aÃ±adirÃ¡n mÃ¡s grÃ¡ficos aquÃ­) ...
    elif chart_type == "Diagrama de Pareto":
        st.subheader("Diagrama de Pareto: Principio 80/20")
        st.info("**PropÃ³sito:** Identificar los 'pocos vitales' que contribuyen a la mayorÃ­a del efecto. AquÃ­, vemos quÃ© regiones representan el 80% de la mÃ©trica seleccionada.")

        year_to_show = st.slider("Selecciona un aÃ±o para el anÃ¡lisis de Pareto", min_year, max_year, max_year - 1)
        data = filtered_df[(filtered_df['year'] == year_to_show) & (filtered_df['region'] != 'World') & (filtered_df['powertrain'] == 'EV')].groupby('region')['value'].sum().sort_values(ascending=False)
        
        data = data.to_frame()
        data['cumulative_sum'] = data['value'].cumsum()
        data['cumulative_perc'] = 100 * data['cumulative_sum'] / data['value'].sum()

        fig = go.Figure()
        fig.add_trace(go.Bar(x=data.index, y=data['value'], name=selected_metric))
        fig.add_trace(go.Scatter(x=data.index, y=data['cumulative_perc'], name='Porcentaje Acumulado', yaxis='y2', mode='lines+markers'))

        fig.update_layout(
            title=f'AnÃ¡lisis de Pareto para "{selected_metric}" en {year_to_show}',
            yaxis=dict(title='Valor'),
            yaxis2=dict(title='Porcentaje Acumulado (%)', overlaying='y', side='right', range=[0, 100]),
            legend=dict(x=0.1, y=0.9)
        )
        st.plotly_chart(fig, use_container_width=True)

    else:
        st.warning(f"El grÃ¡fico '{chart_type}' aÃºn no estÃ¡ implementado.")


if __name__ == "__main__":
    main()

